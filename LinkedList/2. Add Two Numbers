# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        head = ListNode()
        carry = 0
        ptr = head
        
        while True:
            if l1 != None:
                carry += l1.val 
                l1 = l1.next 
            
            if l2 != None:
                carry += l2.val
                l2 = l2.next 
            
            ptr.val = carry % 10
            carry /= 10
            
            if l1 != None or l2 != None or carry != 0:
                ptr.next = ListNode(0)
                ptr = ptr.next
            
            else:
                break
            
        return head

#2
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        tail = dummy = ListNode(None)
        
        carry = 0
        
        while l1 or l2 or carry:
            if l1:
                carry += l1.val
                l1 = l1.next 
            
            if l2:
                carry += l2.val 
                l2 = l2.next 
            
            tail.next = ListNode(carry % 10)
            tail = tail.next
            
            carry //= 10 
        
        return dummy.next
                
