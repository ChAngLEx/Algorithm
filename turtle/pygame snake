import pygame, sys, random
from pygame.locals import * 

# Difinite some colors we will use after 
Pink = (255, 182, 193)
Black = (0, 0, 0)
White = (255, 255, 255)

# initial the program
pygame.init()
# definite a variable to contral the speed
time_clock = pygame.time.Clock()

# create a window, named the game
screen = pygame.display.set_mode((640, 480))
pygame.display.set_caption('snake')

# difinite some initial variables for the snake 
# the initial position of snake head
snake_position = [100,100]
# the length of sanke
snake_segments = [[100, 100], [80, 100], [60, 100], [40, 100],[20,100]]
# the initial position of food
food_position = [300,300]
# the status of food, 1 represents not be eaten
food_total = 1 
# difinite the direction of the snake
direction = 'right'
# difinite a varible to control the direction of the sanke
change_direction = direction

# we could through control the keyboard to control the movement of the sanke
while True:
    # acquire the events
    events = pygame.event.get()
    for event in events:
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        # if the type of event is keyboard event, means game players operate the keyborad while playing the game
        elif event.type == KEYDOWN:
            if event.key == K_RIGHT or event.key == K_d:
                change_direction = 'right'
            if event.key == K_LEFT or event.key == K_a:
                change_direction = 'left'
            if event.key == K_UP or event.key == K_w:
                change_direction = 'down'
            if event.key == K_DOWN or event.key == K_s:
                change_direction = 'up'
            if event.key == K_ESCAPE:
                pygame.event.pots(pygame.event.Event(QUIT))
    # this is to ensure we did not press the controdictory direction
    if change_direction == 'right' and not direction == 'left':
        direction = change_direction
    if change_direction == 'left' and not direction == 'right':
        direction = change_direction
    if change_direction == 'up' and not direction == 'down':
        direction = change_direction
    if change_direction == 'down' and not direction == 'up':
        direction = change_direction
    # the snake will move according the direction
    if direction == 'right':
        snake_position[0] += 20
    if direction == 'left':
        snake_position[0] -= 20
    if direction == 'up':
        snake_position[1] += 20
    if direction == 'down':
        snake_position[1] -= 20
    # this is to judge whether the sanke have been eaten the food, if it ate the food, the length of its will be added
    snake_segments.insert(0, list(snake_position))
    if snake_position[0] == food_position[0] and snake_position[1] == food_position[1]:
        food_total = 0
    else:
        snake_segments.pop()
    
    # if food were eaten, a new food will be created
    if food_total == 0:
        x = random.randrange(1, 32)
        y = random.randrange(1, 24)
        food_position = [int(x * 20), int(y * 20)]
        food_total = 1 
    # fill the backgroud color
    screen.fill(Black)
    # draw the snake and food
    for position in snake_segments:
        pygame.draw.rect(screen, Pink, (position[0], position[1], 20, 20))
        pygame.draw.rect(screen, White, (food_position[0],food_position[1], 20, 20))
    
    # update the screen display   
    pygame.display.flip()
    
    # judge whether the game is over or not
    # if sanke bump into edge of the window
    if snake_position[0] > 620 or snake_position[0] < 0:
        pygame.quit()
        sys.exit()
    
    if snake_position[1] > 460 or snake_position[1] < 0:
        pygame.quit()
        sys.exit()
    # if it tough its own body
    for body in snake_segments[1:]:
        if snake_position[0] == body[0] and snake_position[1] == body[1]:
            pygame.quit()
            sys.exit()
    # control the movement speed 
    time_clock.tick(1)
