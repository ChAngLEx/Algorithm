Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:

Each of the array element will not exceed 100.
The array size will not exceed 200.
 

Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].
 

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        target = sum(nums)  
        
        if target % 2 == 1:
            return False
        
        target = target // 2
        
        dp = [[False for _ in range(target + 1)] for _ in range(len(nums) + 1)]
        
        dp[0][0] = True
        
        for i in range(1, len(nums) + 1):
            for j in range(1, target + 1):
                
                dp[i][j] = dp[i-1][j]
                if j >= nums[i-1]:
                    dp[i][j] = dp[i-1][j - nums[i-1]] or dp[i-1][j]
        
        return dp[-1][-1]
