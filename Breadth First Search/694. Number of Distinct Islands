# 1:BFS
DIRECTIONS = [(1, 0), (0, 1), (-1, 0), (0, -1)]
class Solution:
    def numDistinctIslands(self, grid: List[List[int]]) -> int:
        if not grid or not grid[0]:
            return 0
        
        count = set()
        for i in range(len(grid)):
            for j in range(len(grid[0])): 
                island = set()
                if grid[i][j] == 1:
                    self.find_island(grid, island, i, j)
                    
                    count.add(tuple(island))
        
        return len(count)
    
    def find_island(self,grid, island, i, j):
        queue = collections.deque([(i, j)])
        grid[i][j] = 0
        
        while queue:
            x, y = queue.popleft()
            
            for direct in DIRECTIONS:
                new_i, new_j = x + direct[0], y + direct[1]
                
                if 0 <= new_i < len(grid) and 0 <= new_j < len(grid[0]) and grid[new_i][new_j] == 1:
                    queue.append((new_i, new_j))
                    island.add((new_i - i, new_j - j))
                    grid[new_i][new_j] = 0
                    
#2.DFS


#3.
DIRECTIONS = [(1, 0), (0, 1), (-1, 0), (0, -1)]
class Solution:
    def numDistinctIslands(self, grid: List[List[int]]) -> int:
        if not grid or not grid[0]:
            return 0
        
        queue = collections.deque()
        island_node = []
        for i in range(len(grid)):
            for j in range(len(grid[0]) ):
                if grid[i][j] == 1:
                    island_node.append((i, j))        
        
        if len(island_node) == 1:
            return 1
        
        visited_node = set()        
        island = []
        
        for i in range(len(island_node)):
            if island_node[i] not in visited_node:
                queue.append(island_node[i])
                visited_node.add(island_node[i])
                
            temp = []

            while queue:
                
                x, y = queue.popleft()
                temp.append((0,0))
                for direct in DIRECTIONS:
                    new_x = x + direct[0]
                    new_y = y + direct[1]


                    if not self.is_valid(new_x, new_y, grid, visited_node):
                        continue

                    if grid[new_x][new_y] == 1:
                        temp.append(direct)                        
                        queue.append((new_x, new_y))
                        visited_node.add((new_x, new_y))
                
                
            if temp not in island and temp:                
                island.append(temp)
                 
        return len(island)
      
    def is_valid(self, x, y, grid, visited_node):
        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]):
            return False
        
        if grid[x][y] == 0:
            return False
        
        if (x, y) in visited_node:
            return False
        
        return True
# 2 graph:

DIRECTIONS = [(1, 0), (0, 1), (-1, 0), (0, -1)]
class Solution:
    def numDistinctIslands(self, grid: List[List[int]]) -> int:
        if not grid or not grid[0]:
            return 0 
        
        graphs = set()
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 0:
                    continue
                
                graph = self.get_graphs(grid, i, j)
                graphs.add(graph)
        
        return len(graphs)
    
    def get_graphs(self, grid, i, j):
        queue = collections.deque([(i, j)])        
        grid[i][j] = 0        
        graph = ()
        
        while queue:
            x, y = queue.popleft()           
            
            for direct in DIRECTIONS:
                new_x = direct[0] + x
                new_y = direct[1] + y
                
                if self.is_valid(new_x, new_y, grid):
                    queue.append((new_x, new_y))
                    grid[new_x][new_y] = 0
                    
                    graph += (new_x - i, new_y - j) # how to add tuple 
        
        return graph
                    
    
    def is_valid(self, x, y, grid):
        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):
            return False
        
        if grid[x][y] == 0:
            return False
        
        return True
