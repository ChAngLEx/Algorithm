DIRECTIONS = [(1, 0), (-1, 0), (0, 1), (0, -1)]
class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        if not matrix or not matrix[0]:
            return []
        
        queue = collections.deque()
        visited = set()
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == 0:
                    queue.append((i, j))
                    visited.add((i, j))
        level = 0
        while queue:
            for _ in range(len(queue)):
                x, y = queue.popleft()
                matrix[x][y] = level
                
                for direct in DIRECTIONS:
                    new_x, new_y = direct[0] + x, direct[1] + y
                    
                    if self.is_valid(matrix, new_x, new_y, visited):
                        queue.append((new_x, new_y))
                        visited.add((new_x, new_y))
            
            level += 1
        
        return matrix
    
    def is_valid(self, matrix, x, y, visited):
        if x < 0 or y < 0 or x >= len(matrix) or y >= len(matrix[0]):
            return False
        
        if (x, y) in visited:
            return False
        
        if matrix[x][y] != 1:
            return False
        
        return True
