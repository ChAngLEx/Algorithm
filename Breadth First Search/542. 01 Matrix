DIRECTIONS = [(1, 0), (-1, 0), (0, 1), (0, -1)]
class Solution:
    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:
        if not matrix or not matrix[0]:
            return []
        
        visited = set()
        queue = collections.deque()
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == 1:
                    continue                
                queue.append((i,j))
                visited.add((i, j))
        
        level = 0
        while queue:
            for _ in range(len(queue)):
                
                x, y = queue.popleft()               
                matrix[x][y] = level
                
                for direct in DIRECTIONS:
                    new_x, new_y = x + direct[0], y + direct[1]
                
                    if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]) and (new_x, new_y) not in visited and matrix[new_x][new_y] == 1:
                        
                        queue.append((new_x, new_y))
                        visited.add((new_x, new_y))
                
            level +=1              
        return matrix
