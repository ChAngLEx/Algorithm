class Solution:
    def minMutation(self, start: str, end: str, bank: List[str]) -> int:
        bank = set(bank)
        if end not in bank or not bank:
            return -1
        
        bank.add(start)
        queue = collections.deque([start])
        count = 0
        visited = set((start))
        
        while queue:
            for _ in range(len(queue)):
                gene = queue.popleft()
            
                for i in range(len(gene)):
                    left, right = gene[:i], gene[i+1:]

                    for c in ['A', 'C','G','T']:
                        if c == gene[i]:
                            continue

                        new_gene = left + c + right

                        if new_gene == end:
                            return count + 1

                        if new_gene not in visited and new_gene in bank:
                            visited.add(new_gene)
                            queue.append(new_gene)
            
            count += 1
            
                
        
        return -1
