In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 



DIRECTIONS = [(1, 0), (-1, 0), (0, 1), (0, -1)]
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        if not len(grid) or not len(grid[0]):
            return -1
        
        queue = collections.deque()
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 2:
                    queue.append((i, j))
        
        count = 0
        
        while queue:          
            for _ in range(len(queue)):
                x, y = queue.popleft()
                
                for direct in DIRECTIONS:
                    new_x = x + direct[0]
                    new_y = y + direct[1]
                    
                    if self.is_valid(new_x, new_y, grid):
                        grid[new_x][new_y] = 2
                        queue.append((new_x,new_y))
                      
            count += 1
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    return -1

        if count == 0:
            return 0

        return count - 1
    
    def is_valid(self, x, y, grid):
        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]):
            return False
        
        if grid[x][y] == 0:
            return False
        
        if grid[x][y] == 2:
            return False
        
        return True
        



        
