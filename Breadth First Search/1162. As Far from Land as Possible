DIRECTIONS = [(0, 1), (0, -1), (1, 0), (-1, 0)]
class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        if not grid or not grid[0]:
            return -1
     
        
        visited = set()
        queue = collections.deque()
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    queue.append((i, j))
                    visited.add((i, j))
        
        if len(queue) == len(grid) * len(grid[0]):
            return -1
        
        distance = -1
        while queue:
            distance += 1
            for _ in range(len(queue)):
                x, y = queue.popleft()
                
                for direct in DIRECTIONS:
                    new_x, new_y = direct[0] + x, direct[1] + y
                    
                    if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and (new_x, new_y) not in visited and grid[new_x][new_y] == 0:
                        queue.append((new_x, new_y))
                        visited.add((new_x, new_y))
                       
        return distance
