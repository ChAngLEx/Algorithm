In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isCousins(self, root: TreeNode, x: int, y: int) -> bool:
        if not root:
            return False
        
        queue = collections.deque([root])
        flag_x, flag_y = False, False,
        
        while queue:
            for _ in range(len(queue)):
                node = queue.popleft()
                             
                if node.val == x:
                    flag_x = True
                
                if node.val == y:
                    flag_y = True
                
                
                if node.left and node.right:
                    
                    if node.left.val == x and node.right.val == y:
                        return False
                    
                    if node.left.val == y and node.right.val == x:
                        return False
                
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            
                print(flag_x,flag_y)
            
            if flag_x and flag_y:
                return True
            
            if (flag_x and not flau_y) and not (flag_y and flag_x):
                return False
