Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

 

Example:

Input: [1,2,3,4,5]
  
          1
         / \
        2   3
       / \     
      4   5    

Output: [[4,5,3],[2],[1]]
 



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findLeaves(self, root: TreeNode) -> List[List[int]]:
        self.results = []
        self.helper(root)
        
        return self.results
    
    
    def helper(self, root):
        if not root:
            return -1 
        
        left = self.helper(root.left)
        right = self.helper(root.right)
        
        height = max(left, right) + 1 
        
        if height == len(self.results):
            self.results.append([])
        
        self.results[height].append(root.val)
        
        return height
        
