#1. Divide&Conquer

class Solution:
    
    def flatten(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        # Divide & Conquer   
        self.helper(root)
    
    def helper(self, root):
        if not root:
            return
        
        left_last = self.helper(root.left)
        right_last = self.helper(root.right)
        
        if left_last:
            left_last.right = root.right
            root.right = root.left
            root.left = None
        
        return right_last or left_last or root

#2.Stack
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    
    def flatten(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """  
        #stack
        if not root:
            return
        
        stack = collections.deque([root])
        while stack:
            node = stack.pop()
            
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
            
            node.left = None
            
            if stack:
                node.right = stack[-1]
            else:
                node.right = None
            
