#1. linked-list level tarverse
"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        node = root
        tail = dummy = Node(0)
        while node:
            tail.next = node.left
            if tail.next:
                tail = tail.next 
            
            tail.next = node.right
            if tail.next:
                tail = tail.next 
            
            node = node.next
            if not node:
                tail = dummy
                node = dummy.next 
        
        return root

# queue level tarverse:
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return root
        
        queue = collections.deque([(root, 0)])
        while queue:
            node, level = queue.popleft()
            
            if len(queue) and queue[0][1] == level and node:
                node.next = queue[0][0]
            
            if node.left:
                queue.append((node.left, level + 1))
            
            if node.right:
                queue.append((node.right, level + 1))
            
    
        return root
                
