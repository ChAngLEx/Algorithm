Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?

# 1. Recurtion


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        self.result = []
        self.recurtion(root)
        
        return self.result
    
    def recurtion(self, root):
        if not root:
            return 
        
        self.recurtion(root.left)
        self.result.append(root.val)
        self.recurtion(root.right)
        
# 2. Divide & Conquer
# extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。

class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        
        result = []
        left = self.inorderTraversal(root.left)
        right = self.inorderTraversal(root.right)
        
        result.extend(left)
        result.append(root.val)
        result.extend(right)
        
        return result
