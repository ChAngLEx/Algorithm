#1. BFS
class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return root
        
        queue = collections.deque([root])
        while queue:
            node = queue.popleft()
            if node.right and node.left:
                node.left.next = node.right
                
                if node.next:
                    node.right.next = node.next.left
                
                queue.append(node.left)
                queue.append(node.right)
        
        return root
  
 # 2. Recurtion
 class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if root and root.left and root.right:
        
            root.left.next = root.right
        
            if root.next:
                root.right.next = root.next.left
            
            self.connect(root.left)
            self.connect(root.right)
        
        return root

#3. DFS
class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return 
        stack = [root]
        while stack:
            curr = stack.pop()
            if curr.left and curr.right:
                curr.left.next = curr.right
                if curr.next:
                    curr.right.next = curr.next.left
                stack.append(curr.right)
                stack.append(curr.left)
        
        return root
