#1. Recrtion. divide linked-list
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """            
        return self.covert(head)
    
    # recurtion   
    def covert(self, head):
        if not head:
            return None
        
        if not head.next:
            return TreeNode(head.val)
        
        dummy = ListNode(0)
        dummy.next = head
        fast = head
        slow = dummy
        
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        
        mid = slow.next
        slow.next = None
        root = TreeNode(mid.val)
        
        root.left = self.covert(head)
        root.right = self.covert(mid.next)
        
        return root
    
 # 2.  convert linked-list to a list, then D&C
 # Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """            
        node_list = []
        while head:
            node_list.append(head.val)
            head = head.next
        
        return self.convert(node_list, 0, len(node_list) - 1)
    
    def convert(self, node_list, start, end):
        if start > end:
            return None
        
        if start == end:
            return TreeNode(node_list[start])
        
        mid = (start + end) // 2
        root = TreeNode(node_list[mid])
        root.left = self.convert(node_list, start, mid - 1)
        root.right = self.convert(node_list, mid + 1, end)
        
        return root
