#1. sorted
class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        mp = {}
        for word in words:
            mp[word] = mp.get(word, 0) + 1
        
        mp = sorted(mp.items(), key = lambda item: [-item[1], item[0]])
        
        res = []
        for i in range(k):
            res.append(mp[i][0])
        
        return res
       

2.heap

import heapq
class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        mp = {}
        for word in words:
            mp[word] = mp.get(word, 0) + 1
        
        heap = []
        for item in mp.items():
            heapq.heappush(heap, [-item[1], item[0]])
        
        res = []
        for i in range(k):
            tmp = heapq.heappop(heap)
            res.append(tmp[1])
        
        return res

        
