# LinkedList
class ListNode:
    def __init__(self, key = None, value = None, next = None):
        self.key = key
        self.value = value
        self.next = next
        
class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.key_to_prev = {}
        self.dummy = ListNode()
        self.tail = self.dummy

    def update_dummy(self, key):
        prev = self.key_to_prev[key]
        curt = prev.next
        
        if curt == self.tail:
            return
        
        prev.next = curt.next
        
        self.key_to_prev[curt.next.key] = prev
        
        self.push(curt)
    
    def push(self, curt):
        self.key_to_prev[curt.key] = self.tail
        curt.next = None
        self.tail.next = curt
        self.tail = curt
        
    def get(self, key: int) -> int:
        if key not in self.key_to_prev:
            return -1
        
        self.update_dummy(key)
        
        return self.key_to_prev[key].next.value
    
    def pop_front(self):
        head = self.dummy.next
        self.dummy.next = head.next
        self.key_to_prev[head.next.key] = self.dummy
        del self.key_to_prev[head.key]
        
        

    def put(self, key: int, value: int) -> None:
        if key in self.key_to_prev:
            self.key_to_prev[key].next.value = value
            self.update_dummy(key)
            return
    
        new_node = ListNode(key, value)
        self.push(new_node)
        
        
        if len(self.key_to_prev) > self.capacity:
            self.pop_front()
 
 
 
 # Hash
 class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.capacity = capacity
        self.record = {}
        self.keys = []

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.record:
            self.keys.remove(key)
            self.keys.append(key)
            return self.record[key]
        
        return -1

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        self.record[key] = value
        
        if key in self.keys:
            self.keys.remove(key)
        self.keys.append(key)
        
        if len(self.record) > self.capacity:
            del self.record[self.keys[0]]
            self.keys = self.keys[1:]
