#分析题目，要找的是待查询序列的一个子序列，这个子序列可以是给定目标序列的任意顺序。我们首先要考虑如何满足所谓的任意顺序。这里很容易想到采取一种哈希策略，使包含目标序列的字符拥有相同的哈希值，从而任何顺序的字符序列都可以被快速识别出来。这样的想法是完全正确的，相比去产生所有可能的序列，这种方法无疑拥有更低的时间复杂度。这种方法还是比较好想到，只需要一个字符数组，保存目标序列各个字符出现的次数即可。这样，只要满足对应数组结构的子序列，就是一个符合要求的子序列。

#字符串匹配问题一个常见的解法就是滑动窗口了，我们利用上述得到的哈希数组，来移动滑动窗口，若窗口内的字符串满足该数组，我们就记录窗口左部的下标

#复杂度分析

#时间复杂度O(n)
#n为数组的大小
#空间复杂度O(1)
#需要开辟字母数量的空间和指针空间

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        res = []
        record = {}
        
        for c in p:
            if c not in record:
                record[c] = 1                        
            else:
                record[c] += 1
        
        l, r = 0, -1
        while l < len(s):
            if r - l + 1 == len(p):
                res.append(l)
            
            if r < len(s) - 1 and s[r + 1] in record and record[s[r + 1]] > 0:
                r += 1
                record[s[r]] -= 1
            
            else:
                if s[l] not in record:
                    record[s[l]] = 1
                
                else:
                    record[s[l]] += 1
                
                l += 1
    
        return res
